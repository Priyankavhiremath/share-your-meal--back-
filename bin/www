#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('share-your-meal-backend:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// --------------------------------------------Socket.io video-------------------------------------------------------------

const socket = require ('socket.io')
const io = socket(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
})

let users = []
let usersMessage = [];

const getRandomPastelColor = () => {
  const hue = Math.floor(Math.random() * 360);
  const pastelColor = 'hsl(' + hue + ', 100%, 80%)';
  return pastelColor
}

io.on('connection', (socket) => {
  socket.emit('myId', socket.id)
//------------------------------------------
  socket.on('newGuestUser', (newGuestUser)=> {
    users.push(newGuestUser)
    io.emit('connectedUsers', users)
  })
// ------------------------------------------
  socket.on('callUser', ({userToCall, from, signal}) => {
    console.log({userToCall, from})
    io.to(userToCall).emit('incomingCall', { from, signal })
  })
// ------------------------------------------
socket.on('acceptCall', ({userWhoCalled, signal}) => {
    io.to(userWhoCalled).emit('acceptedCall', signal)
})
// ------------------------------------------
socket.on("disconnect", () => {
  users = users.filter(user => user.id !== socket.id)
  io.emit('connectedUsers', users)
});
// ----------------------------------------------
  
socket.on("newUser", ({ username }) => {
  socket.username = username;
  socket.color = getRandomPastelColor();

  usersMessage.push({
    username,
    id: socket.id
  });

  socket.emit("loginSuccess", {
    numberOfConnectedUsers: usersMessage.length,
    usersMessage,
  });

  socket.broadcast.emit("userJoined", {
    username,
    usersMessage,
    numberOfConnectedUsers: usersMessage.length,
  });
});

socket.on("newMessage", (message) => {
  socket.broadcast.emit("newMessage", {
    from: socket.username,
    message,
    color: socket.color
  });
});

socket.on("disconnect", () => {
  usersMessage = usersMessage.filter(user => user.id !== socket.id)

  socket.broadcast.emit("userDisconnected", {
    username: socket.username,
    usersMessage,
    numberOfConnectedUsers: usersMessage.length,
  });
});
})

//-----------------------------------------------------------------------------------------------------------------------

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log(`server is running on port ${port}`)
  debug('Listening on ' + bind);
  
}



