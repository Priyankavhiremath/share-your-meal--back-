#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("share-your-meal-backend:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// --------------------------------------------Socket.io-------------------------------------------------------------

const socket = require("socket.io");
const io = socket(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

let users = [];

const getRandomPastelColor = () => {
  const hue = Math.floor(Math.random() * 360);
  return pastelColor = 'hsl(' + hue + ', 100%, 80%)';
}

io.on("connection", (socket) => {
  socket.emit("myId", socket.id);
  //------------------------------------------
  socket.on("newGuestUser", ({ id, name ,country, language, comStyle }) => {
    users.push({ id, name ,country, language, comStyle });
    
    io.emit("connectedUsers", users);
    socket.username = name;
    socket.color = getRandomPastelColor();

    socket.emit("loginSuccess");

    socket.broadcast.emit("userJoined", {
      name
    });
  });
  // ------------------------------------------
  socket.on("callUser", ({ userToCall, from, signal }) => {
    console.log({ userToCall, from });
    io.to(userToCall).emit("incomingCall", { from, signal });
  });
  // ------------------------------------------
  socket.on("acceptCall", ({ userWhoCalled, signal }) => {
    io.to(userWhoCalled).emit("acceptedCall", signal);
    users = users.filter((user) => user.id !== socket.id && user.id !==userWhoCalled);
    console.log(users);
    io.emit("connectedUsers", users);
  });
  //-------------------------------------------
  socket.on("rejectCall", (userWhoCalled) => {
    console.log(`I want to reject the call from ${userWhoCalled}`);
    io.to(userWhoCalled).emit("rejectedCall");
  });
  // ------------------------------------------
  socket.on("disconnect", () => {
    console.log({name: socket.username })
    socket.broadcast.emit("userDisconnected", {
      name: socket.username
    });
    users = users.filter((user) => user.id !== socket.id);
    console.log(" users have changed");
    io.emit("connectedUsers", users);
  });
  // ------------------------------------------
  socket.on("endCall", (userWhoCalled) => {
    io.to(userWhoCalled).emit("endCall");
  });
  // ------------------------------------------
  // ------------------------------------------
  socket.on("newMessage", (message) => {
    socket.broadcast.emit("newMessage", {
      from: socket.username,
      message,
      color: socket.color
    });
  });
});

//-----------------------------------------------------------------------------------------------------------------------

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log(`server is running on port ${port}`);
  debug("Listening on " + bind);
}
